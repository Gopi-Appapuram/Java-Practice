Test Results Summary
Branch: "dev"
Build System: Jenkins
Total Tests: 22
Failures: 11

Exceptions and Issues Encountered:
NoSuchElementException

Tax Year Dropdown: The element was not found on the page.
ElementClickInterceptedException

Filters Button: Multiple instances where clicks were interrupted.
ClassCastException

Checkbox: An unexpected type was encountered during casting.
AssertionError

Search: The results did not match the expected outcome.
NoSuchElementException

Controlled Group Header: The element was not found on the page.


Test Results Summary
Environment: Local
Total Tests: 22
Failures: 14

New Issue
Okta 400 Bad Request
This is a blocker preventing further stabilization of the code.

Previous Exceptions and Issues:
NoSuchElementException

Tax Year Dropdown: Element not found.
Controlled Group Header: Element not found.
ElementClickInterceptedException

Filters Button: Multiple click interruptions.
ClassCastException

Checkbox: Incorrect type casting.
AssertionError

Search: Results did not match expected outcome.
Two-Factor Authentication Failures

Issues with authentication steps preventing test completion.

------------------------------------------------------------------------

Test Results Summary
Environment: Local
Total Tests: 21
Passed: 21
Failures: 0

Recent Updates
Locator Updates: Adjusted and corrected element locators.
Code Stabilization: Improved logic and handling for feature stability.
Previous Issues Resolved
NoSuchElementException

Resolved by updating element locators.
ElementClickInterceptedException

Addressed by improving element interaction logic.
AssertionError

Fixed by aligning expected results with actual outcomes.
Locators

Corrected to ensure accurate element targeting.
Okta 400 Bad Request

Resolved and no longer blocking progress.
Next Steps
Two-Factor Authentication: Handle if Jenkins encounters failures.
Review Code Changes: Ensure all updates align with project requirements.
Continuous Integration: Run tests on the Jenkins pipeline to ensure consistent results.


---------------------------------------------------------------------------------------

Jenkins Test Results Summary
Total Tests: 21
Passed: 20
Failures: 1

Current Issue
NoSuchElementException:
Employee Header: Element not found. This issue is present only in Jenkins.
Previous Resolutions
Locator Updates: Adjusted and corrected element locators.
Code Stabilization: Improved logic and handling for feature stability.
Okta 400 Bad Request: Resolved and no longer blocking progress.


What We’ve Done:
Default Page: The first page of results shows up automatically.
Results per Page: We’ve set a maximum of 20 results per page.
Total Results: The total number of results is now shown below the results list.
Current Page Highlight: The current page number is highlighted in the color "rgb(93, 286, 324)".
Pagination Navigation: You can now navigate to any page using the pagination controls.
Adjustable Results: Users can change how many results they see per page. We’ve made sure it shows the correct number of results.
Edge Cases: We’ve tested special cases to ensure the "previous" and "next" buttons work correctly.





Set<String> visitedPages = new HashSet<>();
    boolean morePagesToVisit = true;

    while (morePagesToVisit) {
        List<WebElement> pageNumberButtonList = findElements(pageNumberButtons);
        morePagesToVisit = false; // Assume no more pages initially

        for (WebElement pageNumber : pageNumberButtonList) {
            String pageNumberText = pageNumber.getText();

            // Check if the page has already been visited
            if (visitedPages.contains(pageNumberText)) {
                continue;
            }

            scrollElementIntoView(findElement(pageNationControls));
            pageNumber.click();
            Logger.info("Clicked on page number " + pageNumberText);
            Assert.assertTrue(findElements(actionsArrows).size() <= Integer.parseInt(pageSize));
            Logger.info("All pages maintained the same user setting for page results.");

            visitedPages.add(pageNumberText);
            morePagesToVisit = true; // There might be more pages to visit after the click
        }
    }









Scenario: Ensure full keyboard accessibility for pagination controls
    Given the user is on a search results page with pagination controls
    When the user tabs through the page
    Then the focus should move sequentially through the "Previous" button, page number links, and "Next" button
    And the "First" and "Last" buttons should also be focusable and navigable via keyboard
    When the user presses the "Enter" key while focusing on the "Next" button
    Then the user should be navigated to the next page of results
    When the user presses the "Enter" key while focusing on the "Previous" button
    Then the user should be navigated to the previous page of results
    When the user presses the "Enter" key while focusing on a specific page number link
    Then the user should be navigated to the selected page number
    When the user presses the "Space" key while focusing on a pagination control
    Then the pagination control should be activated and the user should be navigated accordingly
    When the user tabs through the page
    Then each pagination control should visibly indicate focus (e.g., outline, highlight)
    When a screen reader is used
    Then each pagination control should be announced clearly and correctly by the screen reader
    When the user navigates through pages and new content is loaded
    Then the pagination controls should remain accessible and operable via keyboard
    When the user tests keyboard navigation on various screen sizes and resolutions
    Then the pagination controls should be accessible and operable in all tested scenarios
    When the user tabs through focusable elements within pagination controls that have nested focusable elements
    Then the focus should correctly move through all nested elements and the main pagination controls



    QE Findings - ACANXG-19909
    Story Description
    We need to verify that the search box in filters for Organization and FEIN is clearly visible and operates as expected.

    Steps to Reproduce
    Navigate to the Filter Section: Open the application and go to the filter section where the search box for Organization and FEIN is located.
    Verify Visibility: Check that the search box for Organization and FEIN is clearly visible.
    Test Functionality: Enter different search queries to ensure that the search functionality works as expected.
    Compare UI with Approved UX Pin: Cross-reference the current UI with the approved UX Pin to verify alignment and design consistency.
    Expectations
    The search box for Organization and FEIN should be clearly visible and easily accessible.
    The search functionality should work correctly, providing accurate results based on the input.
    The UI elements should align as per the approved UX Pin design.
    Actual Results
    Functionality: The search box for Organization and FEIN is functional and operates as expected. Search queries return accurate results.
    UI Comparison: While the functionality is correct, there are some alignment issues observed:
    Dropdown Box: Misalignment with the surrounding elements.
    Dropdown Area and Options: Options in the dropdown do not align as per the approved UX design.
    Evidence
    Please refer to the attached evidence for detailed screenshots and observations regarding the alignment issues.


    Export Summary for CSV and XLSX

    Objective: Verify that the exported data in CSV and XLSX formats matches the data displayed in the UI.

    Export Data:

    Initiate the export process for summary data in CSV and XLSX formats.
    UI Data Verification:

    Compare the exported data with the data displayed in the user interface to ensure consistency and accuracy.
    Note:

    As there is no access to the database, validation is performed exclusively through the UI.